[
  {
    "id": "gratitude-bar",
    "template": "casestudy",
    "link": "",
    "target": "_blank",
    "img": "/gbar_small.jpg",
    "img2": "/works/gratitudebar/gbar_group.jpg",
    "img3": "/works/gratitudebar/forumstand.jpg",
    "img4": "/gbar.jpg",
    "img5": "/works/gratitudebar/ipad.jpg",
    "video": "/works/gratitudebar/sendaward.mp4",
    "title": "Gratitude Bar",
    "overview": "I led the revamp of the Gratitude Bar event app for 3,000 attendees, leveraging Next.js, TypeScript, and DocumentDB to create a dynamic, real-time experience. By focusing on intuitive UX and robust design, I enhanced attendee engagement and streamlined event operations, making the app a cornerstone of live events known for its reliability and user-friendly interface.",
    "challenge": "The primary challenge was to create an app that could represent a key aspect of our product in a quick, engaging, and digestible way at large-scale events. Previous versions of the app closely mimicked the product but lacked live, interactive elements, making it less engaging for attendees. The goal was to build an experience that truly captured the real-time, social nature of the product, encouraging attendees to interact more dynamically and feel a sense of immediate connection.",
    "solution": "To deliver a seamless and interactive experience, I leveraged modern tooling with Next.js and DynamoDB, integrating Amplify AppSync for WebSockets to enable real-time updates. When someone sends an award, it appears immediately in the awards feed. Attendees can send points to one another, and these transactions reflect instantly on the platform. A built-in raffle system incentivizes continued interaction, drawing users in to engage more frequently. By prioritizing real-time responsiveness, we created a highly engaging event experience that successfully embodied the spirit of our product.",
    "tools": [
      "Next.js",
      "React",
      "TypeScript",
      "DynamoDB",
      "AWS Amplify",
      "AWS AppSync",
      "AWS Lambda",
      "AWS SQS",
      "Marketo",
      "Figma"
    ]
  },
  {
    "id": "workhuman-live-denver-2025",
    "template": "casestudy",
    "link": "https://www.workhumanlive.com/",
    "target": "_blank",
    "img": "/denver_small.jpg",
    "img2": "/works/denver/denvermobile.jpg",
    "img3": "/works/denver/hotelmobile.jpg",
    "img4": "/works/denver/homelong.jpg",
    "img5": "/works/denver/agendamobile.jpg",
    "video": "/works/denver/denver.mp4",
    "shorthand": "Workhuman Live Denver",
    "title": "Workhuman Live Denver 2025",
    "overview": "I collaborated closely with the design team to shape the Workhuman Live 2025 experience, ensuring functional and reusable components like filters, menus, and fixed elements. Leading the development team, I planned and assigned tasks to other developers, reviewing and integrating their work while mentoring them on the platform's unique features.",
    "challenge": "For the Denver event, our registration goal increased significantly, requiring a website that could engage and entice thousands of attendees to invest in the experience. We needed to level up the user experience from Workhuman Live Austin 2024, making the site more dynamic, visually compelling, and informative. Additionally, accessibility was a top priority, ensuring an inclusive experience for all users. We had to balance cutting-edge design with technical feasibility being in WordPress/PHP/jQuery, maintaining performance and flexibility while integrating new UX improvements.",
    "solution": "From the start, close collaboration between design and development was critical to ensuring the site's success. Development signed off on functionality and what was possible within our custom WordPress environment before designs were finalized. Regular feedback loops between design and dev allowed for continuous improvements, ensuring a polished, user-friendly experience. A stronger focus on WCAG compliance, keyboard navigation, and color contrast improvements made the site more inclusive than ever. Building with Advanced Custom Fields (ACF) allowed for modular content updates while maintaining design integrity. This structured, iterative approach resulted in a highly engaging event website that successfully met our goals, providing a visually compelling, accessible, and seamless experience for thousands of attendees.",
    "tools": ["PHP", "jQuery", "Custom WordPress", "ACF", "Figma"]
  },
  {
    "id": "alt-text-generator",
    "template": "casestudy",
    "link": "https://wh-alt-text-generator.netlify.app/",
    "target": "_blank",
    "img": "/alt_text.png",
    "img2": "/works/alttext/howitworks.jpg",
    "img3": "/works/alttext/wordpress2.jpg",
    "img4": "/works/alttext/contentful.jpg",
    "img5": "/works/alttext/standalone2.jpg",
    "video": "/works/alttext/alttextgenerator.mp4",
    "title": "Alt Text Generator",
    "overview": "I developed and integrated an AI-powered alt text generator into our Contentful and WordPress platforms, enabling seamless and consistent alt text generation across multiple teams. Built with Next.js, AWS, Python, and OpenAI, the app generates high-quality, brand-aware alt text directly within users' workflows, enhancing both accessibility and SEO. By embedding this tool into our CMS platforms, I streamlined content creation, reducing manual effort while ensuring compliance with accessibility standards.",
    "challenge": "Alt text was frequently missing or inconsistently applied across our platforms, creating accessibility gaps and compliance risks. The manual process was time-consuming, and existing text generators failed to produce descriptions that aligned with our brand's voice and product-specific imagery.",
    "solution": "I built a dynamic AI alt text generator tailored to Workhuman's brand elements, incorporating voice, tone, and product offerings to generate accurate, accessible alt text. The tool offers three distinct implementation methods—custom CMS integration, a standalone UI, and API connectivity—allowing teams to generate alt text efficiently across various workflows.",
    "tools": [
      "Next.js",
      "AWS",
      "API Gateway",
      "AWS Lambda",
      "Amazon Textract",
      "Python",
      "Pillow",
      "OpenAI"
    ]
  },
  {
    "id": "workhuman-web-assistant",
    "template": "casestudy",
    "link": "https://keen-paprenjak-003135.netlify.app/",
    "target": "_blank",
    "img": "/works/img/workhumanwebassistant.jpg",
    "img2": "/works/webassistant/bts.jpg",
    "img3": "/works/webassistant/astep1.jpg",
    "img4": "/works/webassistant/step2.jpg",
    "img5": "/works/webassistant/astep3.jpg",
    "video": "/works/webassistant/chatbot.mp4",
    "title": "Workhuman Web Assistant",
    "overview": "I developed an AI chatbot with a Next.js/TypeScript frontend, creating a seamless and interactive user experience. The AWS backend, built with Python and Node.js, automatically updates the chatbot's knowledge base weekly, ensuring it stays current. Additionally, I integrated a custom Python script to query OpenAI GPT-4o mini, enhancing responsiveness and accuracy in delivering answers.",
    "challenge": "The challenge was to create an AI-powered chatbot that could accurately reproduce and surface website data while linking users to relevant content from blogs and pages across the site. Our goal was to reimagine traditional site search by providing an intuitive, conversational experience that would guide users to the right information while answering any questions they might have. Additionally, the chatbot needed to dynamically update its knowledge base to keep pace with frequent content changes, including new blog posts published weekly and multiple page updates each month. Maintaining accuracy while ensuring a fast, natural, and user-friendly experience was a key focus.",
    "solution": "To create an engaging and effective chatbot, I designed a full-screen experience that mimics a text conversation, making it feel approachable and easy to use. Users can rotate through suggested prompts to help guide their journey, making discovery more intuitive. The chatbot retains session context, allowing users to refer back to previous answers during their interaction. I integrated Puppeteer and FAISS for automated web crawling and indexing, ensuring the chatbot always pulls from the latest website content. OpenAI GPT-4o mini is used to process queries and return precise, site-specific answers seamlessly. This resulted in a highly responsive, accurate, and user-friendly AI assistant that serves as a more intuitive alternative to traditional search, providing users with direct pathways to relevant content while maintaining an interactive experience.",
    "tools": [
      "Next.js",
      "TypeScript",
      "AWS",
      "Python",
      "FAISS",
      "Puppeteer",
      "AWS EventBridge",
      "OpenAI"
    ]
  }
]
